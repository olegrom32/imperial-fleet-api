// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/olegrom32/imperial-fleet-api/internal/application/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockspaceshipRepo is a mock of spaceshipRepo interface.
type MockspaceshipRepo struct {
	ctrl     *gomock.Controller
	recorder *MockspaceshipRepoMockRecorder
}

// MockspaceshipRepoMockRecorder is the mock recorder for MockspaceshipRepo.
type MockspaceshipRepoMockRecorder struct {
	mock *MockspaceshipRepo
}

// NewMockspaceshipRepo creates a new mock instance.
func NewMockspaceshipRepo(ctrl *gomock.Controller) *MockspaceshipRepo {
	mock := &MockspaceshipRepo{ctrl: ctrl}
	mock.recorder = &MockspaceshipRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockspaceshipRepo) EXPECT() *MockspaceshipRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockspaceshipRepo) Get(id int64) (domain.Spaceship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(domain.Spaceship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockspaceshipRepoMockRecorder) Get(id interface{}) *spaceshipRepoGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockspaceshipRepo)(nil).Get), id)
	return &spaceshipRepoGetCall{Call: call}
}

// spaceshipRepoGetCall wrap *gomock.Call
type spaceshipRepoGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *spaceshipRepoGetCall) Return(arg0 domain.Spaceship, arg1 error) *spaceshipRepoGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *spaceshipRepoGetCall) Do(f func(int64) (domain.Spaceship, error)) *spaceshipRepoGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *spaceshipRepoGetCall) DoAndReturn(f func(int64) (domain.Spaceship, error)) *spaceshipRepoGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockspaceshipRepo) Update(m *domain.Spaceship) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockspaceshipRepoMockRecorder) Update(m interface{}) *spaceshipRepoUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockspaceshipRepo)(nil).Update), m)
	return &spaceshipRepoUpdateCall{Call: call}
}

// spaceshipRepoUpdateCall wrap *gomock.Call
type spaceshipRepoUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *spaceshipRepoUpdateCall) Return(arg0 error) *spaceshipRepoUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *spaceshipRepoUpdateCall) Do(f func(*domain.Spaceship) error) *spaceshipRepoUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *spaceshipRepoUpdateCall) DoAndReturn(f func(*domain.Spaceship) error) *spaceshipRepoUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockarmamentRepo is a mock of armamentRepo interface.
type MockarmamentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockarmamentRepoMockRecorder
}

// MockarmamentRepoMockRecorder is the mock recorder for MockarmamentRepo.
type MockarmamentRepoMockRecorder struct {
	mock *MockarmamentRepo
}

// NewMockarmamentRepo creates a new mock instance.
func NewMockarmamentRepo(ctrl *gomock.Controller) *MockarmamentRepo {
	mock := &MockarmamentRepo{ctrl: ctrl}
	mock.recorder = &MockarmamentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockarmamentRepo) EXPECT() *MockarmamentRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockarmamentRepo) Get(id int64) (domain.Armament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(domain.Armament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockarmamentRepoMockRecorder) Get(id interface{}) *armamentRepoGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockarmamentRepo)(nil).Get), id)
	return &armamentRepoGetCall{Call: call}
}

// armamentRepoGetCall wrap *gomock.Call
type armamentRepoGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *armamentRepoGetCall) Return(arg0 domain.Armament, arg1 error) *armamentRepoGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *armamentRepoGetCall) Do(f func(int64) (domain.Armament, error)) *armamentRepoGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *armamentRepoGetCall) DoAndReturn(f func(int64) (domain.Armament, error)) *armamentRepoGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
